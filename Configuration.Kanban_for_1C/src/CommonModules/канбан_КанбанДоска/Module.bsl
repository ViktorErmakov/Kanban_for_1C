// @strict-types


#Область ПрограммныйИнтерфейс

// Получить текст HTML.
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстHTMLКанбанДоски() Экспорт
	
	ТекстHTML = Обработки.Канбан_Доска_HTML.ТекстHTMLКанбанДоски();
	Возврат ТекстHTML;
	
КонецФункции

// Канбан доска HTMLВключена.
// 
// Возвращаемое значение:
//   Булево - Канбан доска HTMLВключена
//
Функция КанбанДоскаHTMLВключена() Экспорт
	
	КлючОбъекта = КлючОбъекта();
	КлючНастроек = КлючНастроек();
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, Ложь);
	
	Возврат Результат;
	
КонецФункции

// Канбан доска HTMLПри изменении.
// 
// Параметры:
//  Значение - Булево
//
Процедура КанбанДоскаHTMLПриИзменении(Значение) Экспорт
	
	КлючОбъекта = КлючОбъекта();
	КлючНастроек = КлючНастроек();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Значение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Данные для канбан доски.
// 
// Возвращаемое значение:
//  см. НовыйДанныеДляКанбанДоски
//
Функция ДанныеДляКанбанДоски() Экспорт
	
	ДанныеДляКанбанДоски = НовыйДанныеДляКанбанДоски();
	
	РегистрыСведений.канбан_ИспользуемыеСтатусыДоски.Статусы(ДанныеДляКанбанДоски);
	
//	ПараметрыОтбора = НовыйПараметрыОтбораЗадач(); // заготовка для будущих отборов доски
	
	ТекстЗапросаДанныеЗадач = канбан_КанбанДоскаПереопределяемый.ТекстЗапросаДанныеЗадач();
	
	Выборка = ДополнитьЗапросДанныеЗадач(ТекстЗапросаДанныеЗадач);
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДанныеДляКанбанДоски.ЗадачиИСтатусы.Добавить();
		НоваяСтрока.Задача = Выборка.Задача;
		НоваяСтрока.Статус = Выборка.СтатусЗадачи;
		
		ХранилищеФотографии = Выборка.ХранилищеФотографии;
		ДвоичныеДанныеФотографии = ХранилищеФотографии.Получить();
		Если ДвоичныеДанныеФотографии = Неопределено Тогда
			
			КартинкаПоУмолчанию = БиблиотекаКартинок.канбан_ФотоПоУмолчанию;
			ДвоичныеДанныеФотографии = КартинкаПоУмолчанию.ПолучитьДвоичныеДанные();
			
		КонецЕсли;
		ФотографияСтрокаBase64 = Base64Строка(ДвоичныеДанныеФотографии);
		НоваяСтрока.ФотографияИсполнителя = СтрШаблон("data:image/jpeg;base64,%1", ФотографияСтрокаBase64);
		
		НоваяСтрока.Наименование = Выборка.НаименованиеЗадачи;
		НоваяСтрока.Код = Выборка.КодЗадачи;
		
		СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(Выборка.Задача);
		СсылкаНаИБ = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		НоваяСтрока.НавигационнаяСсылка = СтрШаблон("%1#%2", СсылкаНаИБ, СсылкаНаОбъект);
		
	КонецЦикла;
	
	Возврат ДанныеДляКанбанДоски;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Новый параметры отбора задач.
// 
// Возвращаемое значение:
//  Структура - Новый параметры отбора задач
//
Функция НовыйПараметрыОтбораЗадач() Экспорт
	
	Результат = Новый Структура;
	
	Возврат Результат;
	
КонецФункции

// Новый данные для канбан доски.
// 
// Возвращаемое значение:
//  Структура:
// * Статусы - Массив из ОпределяемыйТип.канбан_СтатусыЗадач
// * ЗадачиИСтатусы - см. НовыйЗадачиИСтатусы
//
Функция НовыйДанныеДляКанбанДоски() Экспорт
	
	СтатусыДоски = Новый Массив; // Массив из ОпределяемыйТип.канбан_СтатусыЗадач
	
	ЗадачиИСтатусы = НовыйЗадачиИСтатусы();
	
	ДанныеДляКанбанДоски = Новый Структура;
	ДанныеДляКанбанДоски.Вставить("Статусы", СтатусыДоски);
	ДанныеДляКанбанДоски.Вставить("ЗадачиИСтатусы", ЗадачиИСтатусы);
	
	Возврат ДанныеДляКанбанДоски;
	
КонецФункции

// Новый задачи и статусы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новый задачи и статусы:
// * Задача - ОпределяемыйТип.канбан_Задачи
// * Наименование - Строка
// * Код - Строка
// * Статус - ОпределяемыйТип.канбан_СтатусыЗадач
// * ФотографияИсполнителя - Строка
// * НавигационнаяСсылка - Строка
//
Функция НовыйЗадачиИСтатусы()
	
	ЗадачиИСтатусы = Новый ТаблицаЗначений;
	ЗадачиИСтатусы.Колонки.Добавить("Задача", Метаданные.ОпределяемыеТипы.канбан_Задачи.Тип);
	ЗадачиИСтатусы.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ЗадачиИСтатусы.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	ЗадачиИСтатусы.Колонки.Добавить("Статус", Метаданные.ОпределяемыеТипы.канбан_СтатусыЗадач.Тип);
	ЗадачиИСтатусы.Колонки.Добавить("ФотографияИсполнителя", Новый ОписаниеТипов("Строка"));
	ЗадачиИСтатусы.Колонки.Добавить("НавигационнаяСсылка", Новый ОписаниеТипов("Строка"));
	
	Возврат ЗадачиИСтатусы;
	
КонецФункции

Функция КлючОбъекта()
	Возврат "КанбанДоскаHTML";
КонецФункции

Функция КлючНастроек()
	Возврат "КанбанДоскаHTMLВключена";
КонецФункции

// Дополнить запрос данные задач.
// 
// Параметры:
//  ТекстЗапросаДанныеЗадач - Строка - Текст запроса данные задач
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
// * Задача - ОпределяемыйТип.канбан_Задачи - ссылка на задачу
// * СтатусЗадачи - ОпределяемыйТип.канбан_СтатусыЗадач
// * ХранилищеФотографии - ХранилищеЗначения - содержит фотографию исполнителя задачи.
// * НаименованиеЗадачи - Строка - наименование задачи
// * КодЗадачи - Число, Строка - код задачи
//
Функция ДополнитьЗапросДанныеЗадач(ТекстЗапросаДанныеЗадач)
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаДанныеЗадач);
	ПервыйПакет = СхемаЗапроса.ПакетЗапросов.Получить(0);
	Оператор = ПервыйПакет.Операторы[0];
	
	ТаблицаИспользуемыеСтатусыДоски = Оператор.Источники.Добавить(
		"РегистрСведений.канбан_ИспользуемыеСтатусыДоски", "ИспользуемыеСтатусыДоски");
	
	Оператор.Источники[0].Соединения.Добавить(
		ТаблицаИспользуемыеСтатусыДоски, 
		"узЗадачи.Статус = ИспользуемыеСтатусыДоски.СтатусЗадачи");
	
	Оператор.Источники[0].Соединения[1].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

#КонецОбласти
