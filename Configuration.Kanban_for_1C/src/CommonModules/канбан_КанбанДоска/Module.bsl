// @strict-types


#Область СлужебныйПрограммныйИнтерфейс

// Получить текст HTML.
// 
// Параметры:
//  КанбанДоска - Строка - HTML страница доски.
//  УникальныйИдентификатор - УникальныйИдентификатор, Строка - гуид формы или адрес во временном хранилище.
//  ПоказыватьФотоПользователя - Булево - Показывать фото пользователя
// 
Процедура ТекстHTMLКанбанДоски(
		КанбанДоска, УникальныйИдентификатор = "", ПоказыватьФотоПользователя = Истина) Экспорт
	
	Обработки.Канбан_Доска_HTML.ТекстHTMLКанбанДоски(
		КанбанДоска, УникальныйИдентификатор, ПоказыватьФотоПользователя);
	
КонецПроцедуры

// Текст HTMLРедактора.
// 
// Параметры:
//  СтраницаHTMLРедактора - Строка - HTML страница редактора
//  УникальныйИдентификатор - УникальныйИдентификатор, Строка - гуид формы или адрес во временном хранилище.
//
Процедура ТекстHTMLРедактора(СтраницаHTMLРедактора, УникальныйИдентификатор = "") Экспорт
	
	Справочники.канбан_Задачи.ТекстHTMLРедактора(СтраницаHTMLРедактора, УникальныйИдентификатор);
	
КонецПроцедуры

// Используемые проекты доски сохранить.
// 
// Параметры:
//  ИспользуемыеПроектыДоски - см. НовыйПроектыДоски
//  Отказ - Булево
//
Процедура ИспользуемыеПроектыДоскиСохранить(ИспользуемыеПроектыДоски, Отказ = Истина) Экспорт
	
	РегистрыСведений.канбан_ИспользуемыеПроектыДоски.Записать(ИспользуемыеПроектыДоски, Отказ);
	
КонецПроцедуры

// Используемые проекты доски загрузить.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НовыйПроектыДоски
//
Функция ИспользуемыеПроектыДоскиЗагрузить() Экспорт
	
	ПроектыДоски = НовыйПроектыДоски();
	
	РегистрыСведений.канбан_ИспользуемыеПроектыДоски.Загрузить(ПроектыДоски);
	
	Возврат ПроектыДоски;
	
КонецФункции

// Используемые статусы доски сохранить.
// 
// Параметры:
//  ИспользуемыеСтатусыДоски - см. НовыйСтатусыДоски
//  Отказ - Булево
//
Процедура ИспользуемыеСтатусыДоскиСохранить(ИспользуемыеСтатусыДоски, Отказ = Истина) Экспорт
	
	РегистрыСведений.канбан_ИспользуемыеСтатусыДоски.Записать(ИспользуемыеСтатусыДоски, Отказ);
	
КонецПроцедуры

// Используемые статусы доски сохраненные для текущего пользователя
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НовыйСтатусыДоски
//
Функция ИспользуемыеСтатусыДоскиЗагрузить() Экспорт
	
	СтатусыДоски = НовыйСтатусыДоски();
	
	РегистрыСведений.канбан_ИспользуемыеСтатусыДоски.Загрузить(СтатусыДоски);
	
	Возврат СтатусыДоски;
	
КонецФункции

// Изменить статус задаче.
// 
// Параметры:
//  ИдентификаторЗадачаСтрока - Строка
//  ИдентификаторСтатусаСтрока - Строка
//  Отказ - Булево
//
// Возвращаемое значение:
//  ОпределяемыйТип.канбан_Задачи
//
Функция ИзменитьСтатусЗадаче(ИдентификаторЗадачаСтрока, ИдентификаторСтатусаСтрока, Отказ) Экспорт
	
	#Область Задача
	
	ИдентификаторЗадача = Новый УникальныйИдентификатор(ИдентификаторЗадачаСтрока);
	
	ТипыЗадачи = Метаданные.ОпределяемыеТипы.канбан_Задачи.Тип.Типы();
	ЗадачаСсылка = Новый(ТипыЗадачи[0]); // ОпределяемыйТип.канбан_Задачи
	МенеджерОбъектаЗадача = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗадачаСсылка);
	
	ЗадачаСсылка = МенеджерОбъектаЗадача.ПолучитьСсылку(ИдентификаторЗадача); // ОпределяемыйТип.канбан_Задачи
	
	#КонецОбласти
	
	#Область Статус
	
	ИдентификаторСтатуса = Новый УникальныйИдентификатор(ИдентификаторСтатусаСтрока);
	
	ТипыСтатус = Метаданные.ОпределяемыеТипы.канбан_СтатусыЗадач.Тип.Типы()[0];
	СтатусСсылка = Новый(ТипыСтатус); // СправочникСсылка
	МенеджерОбъектаСтатус = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтатусСсылка);
	
	СтатусСсылка = МенеджерОбъектаСтатус.ПолучитьСсылку(ИдентификаторСтатуса); // ОпределяемыйТип.канбан_СтатусыЗадач
	
	#КонецОбласти
	
	канбан_КанбанДоскаПереопределяемый.ИзменитьСтатусЗадаче(ЗадачаСсылка, СтатусСсылка, Отказ);
	
	Возврат ЗадачаСсылка;
	
КонецФункции

// Данные для канбан доски.
// 
// Возвращаемое значение:
//  см. НовыйДанныеДляКанбанДоски
//
Функция ДанныеДляКанбанДоски() Экспорт
	
	ТекстЗапросаДанныеЗадач = канбан_КанбанДоскаПереопределяемый.ТекстЗапросаДанныеЗадач();
	
	ДанныеДляКанбанДоски = НовыйДанныеДляКанбанДоски();
	
	ДанныеДляКанбанДоски.Проекты = ИспользуемыеПроектыДоскиЗагрузить();
	
	Проекты = ДанныеДляКанбанДоски.Проекты;
	Если Проекты.Количество() = 0 Тогда
		
		ЗаполнитьВсемиПроектами(ТекстЗапросаДанныеЗадач, Проекты);
		
	КонецЕсли;
	
	ПараметрыОтбора = НовыйПараметрыОтбораЗадач();
	
	ПараметрыОтбора.Проекты = Проекты.ВыгрузитьКолонку("Проект"); // Массив из ОпределяемыйТип.канбан_Проекты
	
	ТекстЗапросаСтатусы = канбан_КанбанДоскаПереопределяемый.ТекстЗапросаСтатусы();
	РегистрыСведений.канбан_ИспользуемыеСтатусыДоски.Статусы(ТекстЗапросаСтатусы, ДанныеДляКанбанДоски);
	
	ДополнитьЗапросДанныеЗадач(ТекстЗапросаДанныеЗадач);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеЗадач;
	
	Запрос.УстановитьПараметр("Проекты", ПараметрыОтбора.Проекты);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыОтбора.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДанныеДляКанбанДоски.ЗадачиИСтатусы.Добавить();
		НоваяСтрока.Задача = Выборка.Задача;
		НоваяСтрока.Статус = Выборка.СтатусЗадачи;
		
		КартинкаПоУмолчанию = БиблиотекаКартинок.канбан_ФотоПоУмолчанию;
		ХранилищеФотографии = Выборка.ХранилищеФотографии;
		Если ПустаяСтрока(ХранилищеФотографии) 
			Или ХранилищеФотографии.Получить() =  Неопределено Тогда
			
			ДвоичныеДанныеФотографии = КартинкаПоУмолчанию.ПолучитьДвоичныеДанные();
			
		Иначе
			
			ДвоичныеДанныеФотографии = ХранилищеФотографии.Получить();
			
		КонецЕсли;
		
		ФотографияСтрокаBase64 = Base64Строка(ДвоичныеДанныеФотографии);
		НоваяСтрока.ФотографияИсполнителя = СтрШаблон("data:image/jpeg;base64,%1", ФотографияСтрокаBase64);
		
		НоваяСтрока.Наименование = Выборка.НаименованиеЗадачи;
		
		СсылкаНаОбъект = ПолучитьНавигационнуюСсылку(Выборка.Задача);
		СсылкаНаИБ = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
		НоваяСтрока.НавигационнаяСсылка = СтрШаблон("%1#%2", СсылкаНаИБ, СсылкаНаОбъект);
		
		НоваяСтрока.ИдентификаторЗадача = Строка(Выборка.Задача.УникальныйИдентификатор());
		НоваяСтрока.Код = Выборка.КодЗадачи;
		НоваяСтрока.Проект = Выборка.Проект;
		НоваяСтрока.ПредставлениеПроекта = Строка(Выборка.Проект);
		НоваяСтрока.ЦветПроекта = Выборка.ЦветПроекта;
		НоваяСтрока.ИдентификаторПроекта = Выборка.ИдентификаторПроектаСтрока;
		НоваяСтрока.ИдентификаторПользователя = 
			?(Выборка.Исполнитель.Пустая(), "", Строка(Выборка.Исполнитель.УникальныйИдентификатор()));
		
	КонецЦикла;
	
	Возврат ДанныеДляКанбанДоски;
	
КонецФункции

// Получает текст HTML из объекта ДокументHTML.
//
// Параметры:
//  ДокументHTML  - ДокументHTML - документ, из которого будет извлекаться текст.
//
// Возвращаемое значение:
//   Строка   - текст HTML
//
Функция ТекстHTMLИзОбъектаДокументHTML(Знач ДокументHTML) Экспорт
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

// Получить объект документ HTMLИз текста HTML. // Заимствована из ОбщийМодуль.Взаимодействие:
// 
// Параметры:
//  ТекстHTML  - Строка
//  Кодировка - Строка
// 
// Возвращаемое значение:
//   ДокументHTML   - созданный документ HTML.
//
Функция ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML, Кодировка = "") Экспорт
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	
	Попытка
	
		ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
	
	Исключение
		
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
		
	КонецПопытки;
	
	Возврат Построитель.Прочитать(ЧтениеHTML);
	
КонецФункции

// Установить объект запроса.
// 
// Параметры:
//  ТекстЗапроса - Строка
//  ИмяОпределяемогоТипа - Строка
//  ПодстрокаПоиска - Строка
//
Процедура УстановитьОбъектЗапроса(ТекстЗапроса, ИмяОпределяемогоТипа, ПодстрокаПоиска) Экспорт
	
	ПолноеИмяОбъекта = ПолноеИмяОбъектаМетаданныхОпределяемогоТипа(ИмяОпределяемогоТипа);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Полное имя объекта метаданных определяемого типа.
// 
// Параметры:
//  ИмяОпределяемогоТипа - Строка
// 
// Возвращаемое значение:
//  Строка - Полное имя объекта метаданных определяемого типа
//
Функция ПолноеИмяОбъектаМетаданныхОпределяемогоТипа(ИмяОпределяемогоТипа) Экспорт
	
	Тип = Метаданные.ОпределяемыеТипы[ИмяОпределяемогоТипа].Тип.Типы()[0];
	ТипСсылка = Новый (Тип); // СправочникСсылка
	МетаданныеТипа = ТипСсылка.Метаданные();
	
	ПолноеИмяОбъекта = МетаданныеТипа.ПолноеИмя();
	
	Возврат ПолноеИмяОбъекта; 
	
КонецФункции

// Загрузить приложение.
// 
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - Двоичные данные страницы
//  Результат - Строка - реквизит формы для отображения приложения.
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
// 
Процедура ЗагрузитьПриложение(ДвоичныеДанные, Результат, УникальныйИдентификатор) Экспорт
	
	Если КлиентскоеПриложение.ТипПриложения() = ТипКлиентскогоПриложения.ВебКлиент Тогда
		
		Результат = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
		
	Иначе
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		Результат = СтрШаблон(
			"%1/%2", 
			ПолучитьНавигационнуюСсылкуИнформационнойБазы(), 
			АдресВХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Новый параметры отбора задач.
// 
// Возвращаемое значение:
//  Структура - Новый параметры отбора задач:
//  * Проекты - Массив из ОпределяемыйТип.канбан_Проекты
//  * ТекущийПользователь - ОпределяемыйТип.канбан_Пользователь
//
Функция НовыйПараметрыОтбораЗадач() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Проекты", Новый Массив);
	Результат.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Возврат Результат;
	
КонецФункции

// Новый данные для канбан доски.
// 
// Возвращаемое значение:
//  Структура:
// * Статусы - см. НовыйСтатусыДоски
// * ЗадачиИСтатусы - см. НовыйЗадачиИСтатусы
// * Проекты - см. НовыйПроектыДоски
//
Функция НовыйДанныеДляКанбанДоски() Экспорт
	
	СтатусыДоски = НовыйСтатусыДоски();
	
	ЗадачиИСтатусы = НовыйЗадачиИСтатусы();
	
	Проекты = НовыйПроектыДоски();
	
	ДанныеДляКанбанДоски = Новый Структура;
	ДанныеДляКанбанДоски.Вставить("Статусы", СтатусыДоски);
	ДанныеДляКанбанДоски.Вставить("ЗадачиИСтатусы", ЗадачиИСтатусы);
	ДанныеДляКанбанДоски.Вставить("Проекты", Проекты);
	
	Возврат ДанныеДляКанбанДоски;
	
КонецФункции

// Новый статусы доски.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новый статусы доски:
// * СтатусЗадачи - ОпределяемыйТип.канбан_СтатусыЗадач
// * НомерПоПорядку - Число
// * КнопкаДобавить - Булево
// * Представление - Строка
//
Функция НовыйСтатусыДоски() Экспорт
	
	СтатусыДоски = Новый ТаблицаЗначений;
	СтатусыДоски.Колонки.Добавить("СтатусЗадачи", Метаданные.ОпределяемыеТипы.канбан_СтатусыЗадач.Тип);
	СтатусыДоски.Колонки.Добавить("НомерПоПорядку", Новый ОписаниеТипов("Число"));
	СтатусыДоски.Колонки.Добавить("КнопкаДобавить", Новый ОписаниеТипов("Булево"));
	СтатусыДоски.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Возврат СтатусыДоски;
	
КонецФункции

// Новый задачи и статусы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новый задачи и статусы:
// * Задача - ОпределяемыйТип.канбан_Задачи
// * Наименование - Строка
// * Код - Строка
// * Статус - ОпределяемыйТип.канбан_СтатусыЗадач
// * ФотографияИсполнителя - Строка
// * ИдентификаторПользователя - Строка
// * НавигационнаяСсылка - Строка
// * ИдентификаторЗадача - Строка
// * Проект - ОпределяемыйТип.канбан_Проекты
// * ПредставлениеПроекта - Строка
// * ИдентификаторПроекта - Строка
// * ЦветПроекта - Строка
//
Функция НовыйЗадачиИСтатусы()
	
	ЗадачиИСтатусы = Новый ТаблицаЗначений;
	ЗадачиИСтатусы.Колонки.Добавить("Задача", Метаданные.ОпределяемыеТипы.канбан_Задачи.Тип);
	ЗадачиИСтатусы.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ЗадачиИСтатусы.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	ЗадачиИСтатусы.Колонки.Добавить("Статус", Метаданные.ОпределяемыеТипы.канбан_СтатусыЗадач.Тип);
	ЗадачиИСтатусы.Колонки.Добавить("ФотографияИсполнителя", Новый ОписаниеТипов("Строка"));
	ЗадачиИСтатусы.Колонки.Добавить("ИдентификаторПользователя", Новый ОписаниеТипов("Строка"));
	ЗадачиИСтатусы.Колонки.Добавить("НавигационнаяСсылка", Новый ОписаниеТипов("Строка"));
	ЗадачиИСтатусы.Колонки.Добавить("ИдентификаторЗадача", Новый ОписаниеТипов("Строка"));
	ЗадачиИСтатусы.Колонки.Добавить("Проект", Метаданные.ОпределяемыеТипы.канбан_Проекты.Тип);
	ЗадачиИСтатусы.Колонки.Добавить("ПредставлениеПроекта", Новый ОписаниеТипов("Строка"));
	ЗадачиИСтатусы.Колонки.Добавить("ИдентификаторПроекта", Новый ОписаниеТипов("Строка"));
	ЗадачиИСтатусы.Колонки.Добавить("ЦветПроекта", Новый ОписаниеТипов("Строка"));
	
	Возврат ЗадачиИСтатусы;
	
КонецФункции

// Новый проекты доски.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новый проекты доски:
// * Проект - ОпределяемыйТип.канбан_Проекты
// * Цвет - Строка
// * ИдентификаторПроектаСтрока - Строка
// * ПредставлениеПроекта - Строка
//
Функция НовыйПроектыДоски() Экспорт
	
	ПроектыДоски = Новый ТаблицаЗначений();
	ПроектыДоски.Колонки.Добавить("Проект", Метаданные.ОпределяемыеТипы.канбан_Проекты.Тип);
	ПроектыДоски.Колонки.Добавить("Цвет", Новый ОписаниеТипов("Строка"));
	ПроектыДоски.Колонки.Добавить("ИдентификаторПроектаСтрока", Новый ОписаниеТипов("Строка"));
	ПроектыДоски.Колонки.Добавить("ПредставлениеПроекта", Новый ОписаниеТипов("Строка"));
	
	Возврат ПроектыДоски;
	
КонецФункции

Функция КлючОбъекта()
	Возврат "КанбанДоскаHTML";
КонецФункции

// Дополнить запрос данные задач.
// 
// Параметры:
//  ТекстЗапросаДанныеЗадач - см. канбан_КанбанДоскаПереопределяемый.ТекстЗапросаДанныеЗадач
// 
Процедура ДополнитьЗапросДанныеЗадач(ТекстЗапросаДанныеЗадач)
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаДанныеЗадач);
	ПервыйПакет = СхемаЗапроса.ПакетЗапросов.Получить(0);
	Оператор = ПервыйПакет.Операторы[0];
	
	#Область ДанныеСтатусов
	
	// Соединяем с таблицей используемых статусов, отсекаем лишние задачи.
	ИспользуемыеСтатусыДоски = Оператор.Источники.Добавить(
		"РегистрСведений.канбан_ИспользуемыеСтатусыДоски", "ИспользуемыеСтатусыДоски");
	ИспользуемыеСтатусыДоски.Соединения.Очистить();
	
	Оператор.Источники[0].Соединения.Добавить(
		ИспользуемыеСтатусыДоски, 
		"Задачи.Статус = ИспользуемыеСтатусыДоски.СтатусЗадачи И ИспользуемыеСтатусыДоски.Пользователь = &ТекущийПользователь");
	СоединениеИспользуемыеСтатусыДоски = Оператор.Источники[0].Соединения.НайтиПоИмени("РегистрСведений.канбан_ИспользуемыеСтатусыДоски");
	СоединениеИспользуемыеСтатусыДоски.ТипСоединения = ТипСоединенияСхемыЗапроса.ВНУТРЕННЕЕ;
	
	#КонецОбласти
	
	#Область ДанныеПроектов
	
	ИспользуемыеПроектыДоски = Оператор.Источники.Добавить(
		"РегистрСведений.канбан_ИспользуемыеПроектыДоски", "ИспользуемыеПроектыДоски");
	
	ИспользуемыеПроектыДоски.Соединения.Очистить();
	КолонкаПроект = ПервыйПакет.Колонки.Найти("Проект");
	ВыбираемоеПолеПроект = КолонкаПроект.Поля[0];
	Оператор.Источники[0].Соединения.Добавить(
		ИспользуемыеПроектыДоски, 
		СтрШаблон("%1 = ИспользуемыеПроектыДоски.Проект И ИспользуемыеПроектыДоски.Пользователь = &ТекущийПользователь", ВыбираемоеПолеПроект));
	
	СоединениеИспользуемыеПроектыДоски = Оператор.Источники[0].Соединения.НайтиПоИмени("РегистрСведений.канбан_ИспользуемыеПроектыДоски");
	СоединениеИспользуемыеПроектыДоски.ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
	
	ВыбираемоеПолеЦветПроекта = Оператор.ВыбираемыеПоля.Добавить("ЕСТЬNULL(ИспользуемыеПроектыДоски.Цвет, """")");
	КолонкаЦветПроекта = ПервыйПакет.Колонки.Найти(ВыбираемоеПолеЦветПроекта);
	КолонкаЦветПроекта.Псевдоним = "ЦветПроекта";
	
	ВыбираемоеПолеПроектИдентификатор = Оператор.ВыбираемыеПоля.Добавить(СтрШаблон("УНИКАЛЬНЫЙИДЕНТИФИКАТОР(%1)", ВыбираемоеПолеПроект));
	КолонкаПроект = ПервыйПакет.Колонки.Найти(ВыбираемоеПолеПроектИдентификатор);
	КолонкаПроект.Псевдоним = "ИдентификаторПроектаСтрока";
	
	Оператор.Отбор.Добавить(СтрШаблон("%1 В (&Проекты)", ВыбираемоеПолеПроект));
	
	#КонецОбласти
	
	ТекстЗапросаДанныеЗадач = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

// Заполнить всеми проектами.
// 
// Параметры:
//  ТекстЗапросаДанныеЗадач - Строка
//  Проекты - см. НовыйПроектыДоски
//
Процедура ЗаполнитьВсемиПроектами(Знач ТекстЗапросаДанныеЗадач, Проекты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеЗадач;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПроектов = РезультатЗапроса.Выгрузить();
	ТаблицаПроектов.Свернуть("Проект, НаименованиеПроекта, УникальныйИдентификаторПроекта");
	Для Каждого СтрокаПроекта Из ТаблицаПроектов Цикл
		
		НоваяСтрокаПроектов = Проекты.Добавить();
		НоваяСтрокаПроектов.Проект = СтрокаПроекта.Проект;
		НоваяСтрокаПроектов.ПредставлениеПроекта = СтрокаПроекта.НаименованиеПроекта;
		НоваяСтрокаПроектов.ИдентификаторПроектаСтрока = Строка(СтрокаПроекта.УникальныйИдентификаторПроекта);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
