// @strict-types


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получить текст HTML.
// 
// Параметры:
//  ТекстКанбанДоска - Строка - реквизит HTML страницы
//  ПоказыватьФотоПользователя - Булево - Показывать фото пользователя
//
Процедура ТекстHTMLКанбанДоски(ТекстКанбанДоска, ПоказыватьФотоПользователя = Истина) Экспорт
	
	// TODO нужно при добавлении задачи проверять не снят ли фильтр этого проекта
	
	ДанныеДляДоски = канбан_КанбанДоска.ДанныеДляКанбанДоски();
	
	Если ДанныеДляДоски.Статусы.Количество() = 0 Тогда
		
		МакетСтраницаРекламы = ПолучитьМакет("ШаблонПустаяДоска");
		ТекстКанбанДоска = МакетСтраницаРекламы.ПолучитьТекст();
		
		Возврат;
		
	КонецЕсли;
	
	ИдентификаторПользователя = Строка(Пользователи.ТекущийПользователь().УникальныйИдентификатор());
	
	Если ПустаяСтрока(ТекстКанбанДоска) Тогда
		
		ТолькоМоиЗадачи = Ложь;
		
		МакетСтраницаРекламы = ПолучитьМакет("ШаблонКанбанДоскиHTML");
		ДокументHTML = МакетСтраницаРекламы.ПолучитьДокументHTML();
		
		УзелТолькоМоиЗадачи = ДокументHTML.ПолучитьЭлементПоИдентификатору("my_tasks");
		УзелТолькоМоиЗадачи.УстановитьАтрибут("class", СтрШаблон("my_tasks user%1", ИдентификаторПользователя));
		
		УзелЧекбоксы = ДокументHTML.ПолучитьЭлементПоИдентификатору("checkboxes");
		
		ПроектыДоски = ДанныеДляДоски.Проекты;
		Для Каждого ДанныеПроекта Из ПроектыДоски Цикл
			
			УзелЧекбоксПроект = ДокументHTML.СоздатьЭлемент("div");
			УзелЧекбоксПроект.УстановитьАтрибут("class", "checkbox");
			
			ИД_Проекта = СтрШаблон("project%1", ДанныеПроекта.ИдентификаторПроектаСтрока);
			
			//Input
			УзелИнпутЧекбокса = ДокументHTML.СоздатьЭлемент("input");
			УзелИнпутЧекбокса.УстановитьАтрибут("type", "checkbox");
			УзелИнпутЧекбокса.УстановитьАтрибут("id", ИД_Проекта);
			УзелИнпутЧекбокса.УстановитьАтрибут("checked", "true");
			УзелИнпутЧекбокса.УстановитьАтрибут("onclick", "checkFluency(id, id)");
			УзелЧекбоксПроект.ДобавитьДочерний(УзелИнпутЧекбокса);
			
			//Label
			УзелЛейблЧекбокса = ДокументHTML.СоздатьЭлемент("label");
			УзелЛейблЧекбокса.УстановитьАтрибут("for", ИД_Проекта);
				
				//Вложенный div
				УзелЧекбоксИмя = ДокументHTML.СоздатьЭлемент("div");
				УзелЧекбоксИмя.УстановитьАтрибут("class", СтрШаблон("tag %1", ИД_Проекта));
				
				Если Не ПустаяСтрока(ДанныеПроекта.Цвет) Тогда
					УзелЧекбоксИмя.УстановитьАтрибут("style", СтрШаблон("background-color: rgb(%1);", ДанныеПроекта.Цвет));
				КонецЕсли;
				
				УзелЧекбоксИмя.ТекстовоеСодержимое = Строка(ДанныеПроекта.ПредставлениеПроекта);
				УзелЛейблЧекбокса.ДобавитьДочерний(УзелЧекбоксИмя);
			
			УзелЧекбоксПроект.ДобавитьДочерний(УзелЛейблЧекбокса);
			
			УзелЧекбоксы.ДобавитьДочерний(УзелЧекбоксПроект);
			
		КонецЦикла;
		
	Иначе
		
		ДокументHTML = ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстКанбанДоска);
		
		УзелТолькоМоиЗадачи = ДокументHTML.ПолучитьЭлементПоИдентификатору("my_tasks");
		Атрибуты = СтрРазделить(УзелТолькоМоиЗадачи.ПолучитьАтрибут("class"), " ");
		ТолькоМоиЗадачи = Атрибуты.Найти("my_tasks_active") <> Неопределено;
		
	КонецЕсли;
	
	УзелЗакрепленнаяШапка = ДокументHTML.ПолучитьЭлементПоИдентификатору("sticky_blok");
	
	УзелДоска = ДокументHTML.ПолучитьЭлементПоИдентификатору("kanban-board");
	УзелДоска.ТекстовоеСодержимое = "";
	
	// Узел для фиксированной шапки статусов задач
	УзелКанбанХедер = ДокументHTML.ПолучитьЭлементПоИдентификатору("kanban_header");
	УзелКанбанХедер.ТекстовоеСодержимое = "";
	
	// Узел для самих задач внутри статусов доски
	УзелКанбанТело = ДокументHTML.СоздатьЭлемент("div");
	УзелКанбанТело.УстановитьАтрибут("class", "kanban_body");
	
	Для Каждого ДанныеСтатуса Из ДанныеДляДоски.Статусы Цикл
		
		УникальныйИдентификаторСтатуса = Строка(ДанныеСтатуса.СтатусЗадачи.УникальныйИдентификатор());
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Статус", ДанныеСтатуса.СтатусЗадачи);
		ЗадачиСоСтатусом = ДанныеДляДоски.ЗадачиИСтатусы.НайтиСтроки(ПараметрыОтбора);
		
		УзелБлокХедера = ДокументHTML.СоздатьЭлемент("div");
		УзелБлокХедера.УстановитьАтрибут("class", "block_header");
		
		// Наименование статуса
		УзелРазделаИмяСтатуса = ДокументHTML.СоздатьЭлемент("strong");
		УзелРазделаИмяСтатуса.УстановитьАтрибут("class", "kanban-block__name");
		УзелРазделаИмяСтатуса.ТекстовоеСодержимое = СтрШаблон("%1", Строка(ДанныеСтатуса.Представление));
		УзелБлокХедера.ДобавитьДочерний(УзелРазделаИмяСтатуса);
		
		// Количество задач
		УзелРазделаКоличествоЗадач = ДокументHTML.СоздатьЭлемент("strong");
		УзелРазделаКоличествоЗадач.УстановитьАтрибут("class", "kanban-block__number");
		УзелРазделаКоличествоЗадач.ТекстовоеСодержимое = СтрШаблон("%1", Строка(ЗадачиСоСтатусом.Количество()));
		УзелБлокХедера.ДобавитьДочерний(УзелРазделаКоличествоЗадач);
		
		#Область КнопкаДобавитьЗадачу
		
		Если ДанныеСтатуса.КнопкаДобавить Тогда
			
			ИдентификаторСтатуса = СтрШаблон("status%1", УникальныйИдентификаторСтатуса);
			
			// Блок кнопки добавления задачи
			УзелСсылкаЗадача = ДокументHTML.СоздатьЭлемент("a");
			УзелСсылкаЗадача.УстановитьАтрибут("href", "#");
			УзелСсылкаЗадача.УстановитьАтрибут("class", СтрШаблон("add_task %1", ИдентификаторСтатуса));
			
			УзелСсылкаСВГ = ДокументHTML.СоздатьЭлемент("svg");
			УзелСсылкаСВГ.УстановитьАтрибут("viewBox", "0 0 24 24");
			УзелСсылкаСВГ.УстановитьАтрибут("xmlns", "http://www.w3.org/2000/svg");
			
			УзелСсылкаPath = ДокументHTML.СоздатьЭлемент("path");
			УзелСсылкаPath.УстановитьАтрибут("d", "M12 4V20M4 12H20");
			УзелСсылкаPath.УстановитьАтрибут("stroke", "rgb(121, 121, 121)");
			УзелСсылкаPath.УстановитьАтрибут("stroke-width", "2");
			УзелСсылкаPath.УстановитьАтрибут("stroke-linecap", "round");
			
			УзелСсылкаСВГ.ДобавитьДочерний(УзелСсылкаPath);
			УзелСсылкаЗадача.ДобавитьДочерний(УзелСсылкаСВГ);
			УзелБлокХедера.ДобавитьДочерний(УзелСсылкаЗадача);
			
		КонецЕсли;
		
		#КонецОбласти
		
		УзелКанбанХедер.ДобавитьДочерний(УзелБлокХедера);
		
		УзелРазделаСтатуса = ДокументHTML.СоздатьЭлемент("div");
		УзелРазделаСтатуса.УстановитьАтрибут("class", "kanban-block");
		УзелРазделаСтатуса.УстановитьАтрибут("id", УникальныйИдентификаторСтатуса);
		УзелРазделаСтатуса.УстановитьАтрибут("ondragover", "allowDrop(event)");
		УзелКанбанТело.ДобавитьДочерний(УзелРазделаСтатуса);
		
		Для Каждого Задача Из ЗадачиСоСтатусом Цикл
			
			ИД_Задачи = СтрШаблон("task%1", Задача.ИдентификаторЗадача);
			ИД_Проекта = СтрШаблон("project%1", Задача.ИдентификаторПроекта);
			ИД_Пользователя = 
				?(ПустаяСтрока(Задача.ИдентификаторПользователя), "", СтрШаблон("user%1", Задача.ИдентификаторПользователя));
			
			// Карточки
			УзелКарточка = ДокументHTML.СоздатьЭлемент("div");
			
			Если ТолькоМоиЗадачи(ТолькоМоиЗадачи, Задача.ИдентификаторПользователя, ИдентификаторПользователя)
				ИЛИ ПроектЗадачиНеВыбран(ДокументHTML, ИД_Проекта, ТекстКанбанДоска) Тогда
				
				УзелКарточка.УстановитьАтрибут("class", СтрШаблон("card %1 %2 card__inactive", ИД_Проекта, ИД_Пользователя));
				
			Иначе
				
				УзелКарточка.УстановитьАтрибут("class", СтрШаблон("card %1 %2", ИД_Проекта, ИД_Пользователя));
				
			КонецЕсли;
			
			// Цвет бордера карточки
//			УзелКарточка.УстановитьАтрибут("onmouseover", СтрШаблон("this.style.borderColor='rgb(%1)';", Задача.ЦветПроекта));
//			УзелКарточка.УстановитьАтрибут("onmouseout", "this.style.borderColor='#ebebeb';");
			
			УзелКарточка.УстановитьАтрибут("draggable", "true");
			УзелКарточка.УстановитьАтрибут("ondragstart", "drag(event)");
			УзелКарточка.УстановитьАтрибут("id", ИД_Задачи);
			
			#Область ШапкаКарточки
			
			УзелШапкаКарточки = ДокументHTML.СоздатьЭлемент("div");
			УзелШапкаКарточки.УстановитьАтрибут("class", "card__header");
			
			УзелТэгКарточки = ДокументHTML.СоздатьЭлемент("div");
			УзелТэгКарточки.УстановитьАтрибут("class", "tag_task");
			УзелТэгКарточки.УстановитьАтрибут("style", СтрШаблон("background-color: rgb(%1);", Задача.ЦветПроекта));
			
			УзелШапкаКарточки.ДобавитьДочерний(УзелТэгКарточки);
			
			УзелШапкаКарточкиСсылка = ДокументHTML.СоздатьЭлемент("a");
			УзелШапкаКарточкиСсылка.УстановитьАтрибут("class", "card__link");
			УзелШапкаКарточкиСсылка.УстановитьАтрибут("href", Задача.НавигационнаяСсылка);
			УзелШапкаКарточкиСсылка.ТекстовоеСодержимое = СтрШаблон("Задача №%1", Задача.Код);
			
			УзелШапкаКарточки.ДобавитьДочерний(УзелШапкаКарточкиСсылка);
			
			Если ПоказыватьФотоПользователя Тогда
				
				УзелШапкаКарточкиИзображение = ДокументHTML.СоздатьЭлемент("img");
				УзелШапкаКарточкиИзображение.УстановитьАтрибут("class", "card__photo");
				УзелШапкаКарточкиИзображение.УстановитьАтрибут("alt", "foto");
				УзелШапкаКарточкиИзображение.УстановитьАтрибут("src", Задача.ФотографияИсполнителя);
				
				УзелШапкаКарточки.ДобавитьДочерний(УзелШапкаКарточкиИзображение);
				
			КонецЕсли;
			
			УзелКарточка.ДобавитьДочерний(УзелШапкаКарточки);
			
			#КонецОбласти
			
			#Область ТелоКарточки
			
			УзелТелоКарточки = ДокументHTML.СоздатьЭлемент("div");
			УзелТелоКарточки.УстановитьАтрибут("class", "card__text");
			
			УзелТелоКарточкиТекст = ДокументHTML.СоздатьЭлемент("span");
			УзелТелоКарточкиТекст.ТекстовоеСодержимое = Задача.Наименование;
			
			УзелТелоКарточки.ДобавитьДочерний(УзелТелоКарточкиТекст);
			УзелКарточка.ДобавитьДочерний(УзелТелоКарточки);
			
			#КонецОбласти
			
			УзелКнопкиОбновлениеСтатуса = ДокументHTML.СоздатьЭлемент("button");
			УзелКнопкиОбновлениеСтатуса.УстановитьАтрибут("class", СтрШаблон("changeStatus %1", ИД_Задачи));
			УзелКнопкиОбновлениеСтатуса.УстановитьАтрибут("style", "visibility: hidden;");
			
			УзелКарточка.ДобавитьДочерний(УзелКнопкиОбновлениеСтатуса);
			
			УзелРазделаСтатуса.ДобавитьДочерний(УзелКарточка);
			
		КонецЦикла;
	
	КонецЦикла;
	
	УзелЗакрепленнаяШапка.ДобавитьДочерний(УзелКанбанХедер);
	УзелДоска.ДобавитьДочерний(УзелКанбанТело);
	
	ТекстКанбанДоска = ТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Код процедур и функций

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает текст HTML из объекта ДокументHTML.
//
// Параметры:
//  ДокументHTML  - ДокументHTML - документ, из которого будет извлекаться текст.
//
// Возвращаемое значение:
//   Строка   - текст HTML
//
Функция ТекстHTMLИзОбъектаДокументHTML(Знач ДокументHTML)
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

// Получить объект документ HTMLИз текста HTML. // Заимствована из ОбщийМодуль.Взаимодействие:
// 
// Параметры:
//  ТекстHTML  - Строка
//  Кодировка - Строка
// 
// Возвращаемое значение:
//   ДокументHTML   - созданный документ HTML.
//
Функция ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML, Кодировка = "")
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	
	Попытка
	
		ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
	
	Исключение
		
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
		
	КонецПопытки;
	
	Возврат Построитель.Прочитать(ЧтениеHTML);
	
КонецФункции

Функция ТолькоМоиЗадачи(ТолькоМоиЗадачи, ИдентификаторПользователяЗадачи, ИдентификаторПользователя)
	
	Результат = ТолькоМоиЗадачи И ИдентификаторПользователяЗадачи <> ИдентификаторПользователя;
	Возврат Результат;
	
КонецФункции

Функция ПроектЗадачиНеВыбран(ДокументHTML, ИД_Проекта, ТекстКанбанДоска)
	
	Результат = Ложь;
	
	Если ПустаяСтрока(ТекстКанбанДоска) Тогда
		Возврат Результат;
	КонецЕсли;
	
	УзелИнпутЧекбокса = ДокументHTML.ПолучитьЭлементПоИдентификатору(ИД_Проекта);
	АтрибутКлассыУзлаОтбора = УзелИнпутЧекбокса.СледующийСоседний.ДочерниеУзлы[0].Атрибуты[0].Значение;
	ИменаКлассовУзлаОтбора = СтрРазделить(АтрибутКлассыУзлаОтбора, " ");
	Результат = ИменаКлассовУзлаОтбора.Найти("tag__inactive") <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
