<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Задачи с фильтрами</title>
    <style type="text/css">
        /* :root {
            
        } */

        /* подключаем внешний шрифт */
        /*@import url("https://fonts.googleapis.com/css2?family=Inter&display=swap");*/

        /* общие настройки для всего */
        html {
            /* font-size: 10px; */
            font-size: 62.5%; /* Это делает 1rem = 10px по умолчанию (16px * 0.625 = 10px) */
            box-sizing: border-box;
        }

        body {
            margin: 0;
            font-size: 1.7rem;
            overflow: auto;
            height: 100vh;
        }

        /* Скрываем полосу прокрутки */
        .scrollable-container::-webkit-scrollbar {
            width: 0;
            /* Для вертикальной полосы */
            /*height: 0;*/
            /* Для горизонтальной полосы */
        }

        .wrapper {
            color: #333333;
            font-family: "Inter", sans-serif;
            display: flex;
            flex-direction: column;
        }

        .sticky_blok {
            display: flex;
            position: fixed;
            top: 0;
            flex-direction: column;
            z-index: 100;
            width: 100%;
        }

        #kanban-board {
            display: flex;
            flex-direction: column;
            width: 100%;
        }

        #kanban_header {
            display: flex;
            width: 100%;
        }

        #main-content-wrapper {
            /* Чтобы масштабирование происходило из верхнего левого угла, а не из центра */
            transform-origin: top left; 
            /* Добавьте transition для плавности масштабирования */
            /* transition: transform 0.2s ease-in-out;  */
        }

        .block_header {
            display: flex;
            align-items: center;
            border-top-left-radius: 1rem;
            border-top-right-radius: 1rem;
        }

        .block_header:first-child {
            margin-left: .5rem;
        }

        .kanban_body {
            display: flex;
            width: 100%;
            top: 4rem;
            /* min-height: 91vh; */
        }

        .kanban-block {
            margin-top: 17.1rem;
        }

        .block_header,
        .kanban-block {
            /* Для равномерного распределения колонок: */
            flex: 1; /* Позволяет элементам расти и занимать доступное пространство */
            min-width: 0; /* Важно для flex: 1, чтобы избежать переполнения */
            
            padding: 0.6rem;
            background-color: rgb(247, 246, 246);
            margin-right: .5rem;
            /* box-sizing: border-box; */
        }

        .kanban-block:first-child {
            margin-left: .5rem;
        }

        .kanban-block:hover {
            background-color: aliceblue;
        }

        /* Пример стилей для подсветки */
        .block_header--hovered {
            background-color: aliceblue; /* Более светлый фон */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Небольшая тень */
            transition: background-color 0.2s ease, box-shadow 0.2s ease; /* Плавный переход */
        }

        /* чекбоксы */
        /* скрываем флажок у чекбокса */
        input[type="checkbox"] {
            display: none;
        }

        .checkboxes {
            display: flex;
            flex-direction: row;
            max-width: 250rem;
            overflow-x: auto;
            /* Показывает прокрутку только при необходимости */
            border: 2px solid #ebebeb;
            border-radius: .4rem;
            /* min-height: 10rem; */
        }

        .checkbox {
            padding: .5rem;
        }

        /* общие настройки для тегов */
        .tag {
            /* внешние отступы */
            padding: .6rem 1.2rem;
            /*min-height: 2.5rem;*/
            /* подгоняем размер блока под содержимое */
            width: -webkit-fit-content;
            width: -moz-fit-content;
            width: fit-content;
            /* радиус скругления */
            border-radius: .4rem;
            /* запрещаем выделять мышкой этот элемент */
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            /* user-select: none; */
            background-color: lightgrey;
        }

        /* добавляем хештег перед тегом */
        .tag::before {
            /* добавляем текст, отступ и прозрачность */
            content: "#";
            margin-right: .2rem;
            opacity: 0.3;
        }

        /* оставляем тег чуть бледнее при нажатии */
        .tag__inactive {
            opacity: 0.5;
            background-color: rgb(233, 233, 233);
        }

        .tag_task {
            width: 2rem;
            height: 2rem;
        }

        /* чекбоксы */

        /* КАРТОЧКИ */
        /* настройки карточки */
        .card {
            /* цвет фона */
            background-color: #ffffff;
            /* граница */
            border: 1px solid #ebebeb;
            /* рисуем границу по периметру карточки */
            /* межстрочное расстояние */
            line-height: 1.5;
            /* радиус скругления */
            border-radius: .8rem;
            /* рисуем тень */
            box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 4px;
            /* скрываем всё, что не помещается в блок */
            /* overflow: hidden; */
            /* включаем гибкую вёрстку */
            display: flex;
            /* организуем вёрстку по столбцам */
            flex-direction: column;
            /* выравниваем карточки по центру друг относительно друга */
            justify-content: space-between;
            align-items: center;
            margin-top: 1rem;
            padding: .5rem;

            /* Обеспечиваем плавный переход для opacity и height */
            transition: opacity 0.5s ease-out, height 0.5s ease-out; /* Время и тип анимации */
            overflow: hidden; /* Важно! Скрывает контент, когда высота уменьшается */

        }

        /* меняем цвет рамки карточки при наведении */
        .card:hover {
            /*border: .12rem solid #2E9AFF;*/
            background-color: lightgrey;
        }

        /* если тег не отмечен */
        .card__inactive {
            opacity: 0; /* Делаем невидимым */
            height: 0; /* Устанавливаем высоту в 0, чтобы элемент не занимал место */
            padding-top: 0;
            padding-bottom: 0;
            margin-top: 0;
            margin-bottom: 0;
            border-width: 0;
        }

        /* КАРТОЧКИ */
        label {
            cursor: pointer;
        }

        /* делаем тег чуть бледнее при наведении */
        label:hover {
            opacity: 0.5;
        }

        .kanban-block__name {
            margin-left: 1rem;
            color: rgb(121, 121, 121);
        }

        .kanban-block__number {
            margin-left: 1rem;
            color: rgb(80, 80, 80);
        }

        .card__header {
            display: flex;
            width: 100%;
            justify-content: space-between;
            align-items: start;
        }

        .card__link {
            color: rgb(17, 138, 236);
            text-decoration: none;
        }

        .card__link:hover {
            text-decoration: underline;
        }

        .card__photo {
            width: 3.5rem;
            height: 4rem;
            border: 1px solid rgb(184, 194, 196);
        }

        .card__photo:hover {
            background-color: lightgrey;
            transform: scale(1.4);
            position: relative;
            right: 1rem;
            top: 1rem;
        }

        .card__text {
            display: flex;
            width: 100%;
        }

        .command_panel {
            display: flex;
            flex-direction: row;
            align-items: center;
            padding: .5rem;
            background-color: white;
            justify-content: space-between;
            height: 10.3rem;
        }

        .command_panel_buttons {
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            margin-left: 2rem;
        }

        .command_panel_buttons>* {
            margin-right: 2rem;
            /* Отступ между элементами */
        }

        .command_panel_buttons>*:last-child {
            margin-right: 0;
            /* Убираем отступ у последнего элемента */
        }

        #update_svg,
        #setup_svg {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 3rem;
            height: 3rem;
            transition: transform 0.4s ease;
        }

        /*Вращаем кнопку обновления на 180 градусов*/
        #update_svg:hover,
        #setup_svg:hover {
            transform: rotate(180deg);
        }

        /*Убираем вращение и увеличиваем кнопку*/
        #update_svg:active,
        #setup_svg:active {
            transform: rotate(-180deg) scale(1.2);
        }

        .my_tasks {
            color: rgb(17, 138, 236);
            text-decoration: none;
            font-family: 'Arial', sans-serif;
            padding: 8px 12px;
            border-radius: 4px;
            transition: all 0.3s ease;
            display: inline-block;
            border: 2px solid #ebebeb;
            cursor: pointer;
            -webkit-user-select: none;
        }

        .my_tasks:hover {
            background-color: #f0f0f0;
            color: rgb(17, 138, 236);
        }

        .my_tasks_active {
            transform: scale(0.98);
            background-color: #8c8c8c;
            color: white;
        }

        @media only screen and (max-width: 1450px) {
            body {
                font-size: 1.5rem;
            }

            .card__photo {
                width: 2.5rem;
                height: 3rem;
            }
        }

        @media only screen and (max-width: 1280px) {
            body {
                font-size: 1.3rem;
            }

            .card__photo {
                width: 2rem;
                height: 2.5rem;
            }
        }

        @media only screen and (max-width: 1150px) {
            body {
                font-size: 1.1rem;
            }

            .card__photo {
                width: 1.5rem;
                height: 2rem;
            }
        }

        @media only screen and (max-width: 1010px) {
            body {
                font-size: .9rem;
            }

            .card__photo {
                width: 1rem;
                height: 1.5rem;
            }

            .tag_task {
                width: 1.5rem;
                height: 1.5rem;
            }
        }

        @media only screen and (max-width: 900px) {
            body {
                font-size: .7rem;
            }

            .card__photo {
                min-width: 0.5rem;
                min-height: 1rem;
            }

            .tag_task {
                width: 1rem;
                height: 1rem;
            }
        }

        /* кнопка добавления задач +++ */
        .add_task {
            min-width: 26px;
            min-height: 26px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            border: none;
            margin: 1rem;
            cursor: pointer;
        }

        .add_task * {
            pointer-events: none;
        }

        .add_task:hover {
            background-color: #8c8c8c;
            transform: rotate(90deg);
        }

        .add_task:hover svg path {
            stroke: white;
        }

        .add_task:active {
            transform: scale(0.9) rotate(90deg);
        }

        .add_task svg {
            width: 16px;
            height: 16px;
        }
        /* кнопка добавления задач --- */

        /* Стили для Drag & Drop подсветки */
        .kanban-block--dragover {
            background-color: #e6f7ff; /* Например, светло-голубой фон */
            /* border: 2px dashed #91d5ff; Пунктирная граница */
            outline: 2px dashed #91d5ff; /* Используем outline вместо border */
            outline-offset: -2px; /* Опционально: сдвигает контур внутрь, чтобы он был внутри padding */
            transition: background-color 0.2s ease, border-color 0.2s ease; /* Плавный переход */
        }

    </style>
</head>

<body>
    <div class="wrapper">

        <div id="main-content-wrapper">

            <div id="sticky_blok" class="sticky_blok">

                <div class="command_panel">

                    <div id="checkboxes" class="checkboxes">

                    </div>

                    <div class="command_panel_buttons">

                        <div id="my_tasks" class="my_tasks">Только мои задачи</div>

                        <div id="update_svg">
                            <svg fill="#8c8c8c" stroke="#8c8c8c" width="32" height="32" style="pointer-events: none;"
                                version="1.1" viewbox="144 144 512 512" xmlns="http://www.w3.org/2000/svg">
                                <path xmlns="http://www.w3.org/2000/svg"
                                    d="m387.4 203.36c-96.539 0.89453-179.1 42.605-214.12 101.71 36.559-24.383 86.039-39.359 140.44-39.359 82.738 0 153.97 34.656 185.94 84.387l-30.547 23.457 157.6 48.492-6.4531-164.84-30.699 23.617c-62.805-50.465-113.38-78.281-202.16-77.461zm-214.12 174.6 6.4531 164.84 30.703-23.617c62.801 50.465 113.38 78.281 202.15 77.461 96.539-0.89453 179.1-42.605 214.12-101.71-36.559 24.383-86.039 39.359-140.44 39.359-82.738 0-153.97-34.656-185.94-84.387l30.547-23.457z"
                                    fill-rule="evenodd"></path>
                            </svg>
                        </div>
                        <div id="setup_svg">
                            <svg fill="#7f7a7a" stroke="#7f7a7a" width="32" height="32" style="pointer-events: none;"
                                version="1.1" viewBox="144 144 512 512" xmlns="http://www.w3.org/2000/svg">
                                <path
                                    d="m431.49 636.16h-62.977c-3.4219 0-6.75-1.1172-9.4805-3.1797-2.7344-2.0586-4.7188-4.9531-5.6562-8.2461l-18.973-66.375-60.348 33.516v0.003906c-2.9922 1.668-6.4414 2.3125-9.832 1.8359-3.3906-0.47266-6.5312-2.043-8.9492-4.4648l-44.52-44.527c-2.418-2.4141-3.9883-5.5547-4.4609-8.9453-0.47656-3.3867 0.16406-6.8359 1.8242-9.8281l33.523-60.363-66.387-18.957c-3.2891-0.94141-6.1836-2.9297-8.2422-5.6602-2.0586-2.7344-3.1719-6.0625-3.1758-9.4805v-62.977c0.003906-3.4219 1.1172-6.75 3.1758-9.4844 2.0586-2.7305 4.9531-4.7188 8.2422-5.6602l66.391-18.957-33.527-60.363c-1.6602-2.9922-2.3008-6.4414-1.8242-9.8281 0.47266-3.3867 2.043-6.5273 4.4609-8.9453l44.52-44.52c2.4141-2.4258 5.5586-3.9961 8.9492-4.4688 3.3906-0.47656 6.8438 0.17188 9.832 1.8398l60.348 33.516 18.973-66.375v0.003906c0.9375-3.293 2.9219-6.1875 5.6523-8.25 2.7305-2.0625 6.0586-3.1797 9.4844-3.1836h62.977c3.4219 0.003906 6.75 1.1172 9.4844 3.1797 2.7305 2.0625 4.7188 4.957 5.6562 8.2461l18.961 66.375 60.359-33.52c2.9922-1.6641 6.4414-2.3086 9.8281-1.832 3.3906 0.47266 6.5312 2.0391 8.9453 4.4609l44.527 44.527c2.418 2.418 3.9805 5.5586 4.457 8.9453 0.47266 3.3867-0.16797 6.8359-1.8281 9.8281l-33.516 60.363 66.375 18.957h-0.003906c3.293 0.94141 6.1875 2.9258 8.2461 5.6602 2.0625 2.7305 3.1797 6.0586 3.1797 9.4844v62.977c0 3.4219-1.1172 6.75-3.1797 9.4844-2.0586 2.7305-4.9531 4.7188-8.2461 5.6562l-66.371 18.961 33.516 60.359c1.6602 2.9922 2.3008 6.4414 1.8281 9.8281-0.47656 3.3867-2.0391 6.5273-4.457 8.9453l-44.527 44.527c-2.4141 2.4258-5.5547 3.9922-8.9453 4.4688-3.3867 0.47656-6.8398-0.17188-9.8281-1.8398l-60.363-33.516-18.957 66.375v-0.003906c-0.9375 3.293-2.9258 6.1875-5.6562 8.2461-2.7344 2.0625-6.0625 3.1797-9.4844 3.1797zm-51.098-31.488h39.23l21.141-74.031h-0.003907c1.3164-4.6211 4.6719-8.3867 9.1094-10.227 4.4414-1.8398 9.4766-1.5508 13.676 0.78125l67.312 37.391 27.734-27.734-37.391-67.312c-2.332-4.1992-2.6211-9.2383-0.78125-13.676 1.8398-4.4375 5.6094-7.793 10.227-9.1094l74.027-21.137v-39.238l-74.031-21.141c-4.6211-1.3164-8.3867-4.6719-10.227-9.1094-1.8398-4.4375-1.5508-9.4766 0.78125-13.676l37.391-67.312-27.73-27.734-67.312 37.391c-4.1992 2.332-9.2344 2.6211-13.676 0.78125-4.4375-1.8398-7.793-5.6055-9.1094-10.227l-21.141-74.027h-39.23l-21.156 74.031c-1.3164 4.6211-4.6719 8.3867-9.1094 10.227-4.4375 1.8398-9.4766 1.5547-13.676-0.78125l-67.305-37.395-27.734 27.734 37.391 67.312c2.332 4.1992 2.6211 9.2344 0.78516 13.672-1.8359 4.4375-5.6016 7.793-10.219 9.1133l-74.039 21.141v39.238l74.039 21.141c4.6172 1.3203 8.3828 4.6758 10.219 9.1133 1.8359 4.4414 1.5469 9.4727-0.78516 13.672l-37.391 67.312 27.734 27.734 67.305-37.391c4.1992-2.332 9.2383-2.6211 13.676-0.78125 4.4375 1.8398 7.793 5.6094 9.1094 10.227z">
                                </path>
                                <path
                                    d="m400 478.72c-20.879 0-40.902-8.293-55.664-23.055-14.766-14.766-23.059-34.789-23.059-55.664 0-20.879 8.293-40.902 23.059-55.664 14.762-14.766 34.785-23.059 55.664-23.059 20.875 0 40.898 8.293 55.664 23.059 14.762 14.762 23.055 34.785 23.055 55.664-0.023438 20.867-8.3281 40.879-23.082 55.637-14.758 14.754-34.77 23.059-55.637 23.082zm0-125.95c-12.527 0-24.543 4.9766-33.398 13.836-8.8594 8.8555-13.836 20.871-13.836 33.398 0 12.523 4.9766 24.539 13.836 33.398 8.8555 8.8555 20.871 13.832 33.398 13.832 12.523 0 24.539-4.9766 33.398-13.832 8.8555-8.8594 13.832-20.875 13.832-33.398-0.011719-12.523-4.9961-24.531-13.848-33.383-8.8555-8.8555-20.863-13.836-33.383-13.852z">
                                </path>
                            </svg>
                        </div>

                    </div>

                </div>

                <div id="kanban_header">
                </div>

            </div>

            <div id="kanban-board">

            </div>

        </div>

        <button id='V8_request' style="display: none;"></button>
        <button id='V8_response' style="display: none;"></button>

    </div>

    <script>
        
        window['V8Proxy'] = {

            // Для запроса из JS в 1С
            fetch: (eventName, idTask, idNewStatus) => {

                // const taskButton = document.querySelector(`.${value}`);
                const V8_request = document.querySelector(`#V8_request`);
                V8_request.value = eventName;
                V8_request.setAttribute('idTask', idTask);
                V8_request.setAttribute('idNewStatus', idNewStatus);
                V8_request.click();
            },
            // Для отправки из 1С в JS
            sendResponse: (eventName, value, userName1C) => {
                // console.log(eventName);
                // console.log(value);
                // console.log(userName1C);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            
            // Кнопка мои задачи отрабатывает без вызова 1С
            let my_tasks = document.getElementById('my_tasks');
            let actualUserId = my_tasks.classList[1];
            my_tasks.addEventListener('click', function () {
                my_tasks.classList.toggle('my_tasks_active');
                let tasks = document.querySelectorAll('.card');
                tasks.forEach(function (taskCard) {
                    let tag = document.querySelector(`.tag.${taskCard.classList[1]}`);

                    if (!taskCard.classList.contains(actualUserId) && !tag.classList.contains('tag__inactive')) {
                        taskCard.classList.toggle('card__inactive');
                    }
                });
                RecalculateKanbanBlock();
            });
            
            // Обработчики для чекбоксов
            document.querySelectorAll('.checkbox input[type="checkbox"]').forEach(checkbox => {
                checkbox.addEventListener('change', (event) => {
                    const id = event.target.id;
                    // Быстрый фильтр по проектам без вызова 1С
                    driveCheckbox = document.querySelector(`.${id}`);
                    driveCheckbox.classList.toggle('tag__inactive');

                    selector = `.card.${id}`;
                    driveCards = document.querySelectorAll(selector);
                    driveCards.forEach(my_tasks_card => {
                        if (my_tasks.classList.contains('my_tasks_active')) {
                            if (my_tasks_card.classList.contains(actualUserId)) {
                                my_tasks_card.classList.toggle('card__inactive');
                            }
                        } else {
                            my_tasks_card.classList.toggle('card__inactive');
                        }
                    });

                    RecalculateKanbanBlock();
                });
            });

            // Перетаскивание задач по статусам +++
            // Обработчики для drag & drop
            document.querySelectorAll('.kanban-block').forEach(block => {
                
                // Убедимся, что dragover все еще работает для всей колонки
                block.addEventListener('dragover', (event) => {
                    event.preventDefault();
                    // Добавляем класс подсветки, когда элемент находится над колонкой (включая карточки)
                    block.classList.add('kanban-block--dragover');
                });

                // Добавляем универсальный обработчик для удаления подсветки,
                // когда перетаскивание завершается или отменяется в любом месте
                block.addEventListener('dragleave', (event) => {
                    // Убедитесь, что курсор действительно покинул блок, а не перешел на дочерний элемент
                    // relatedTarget - элемент, на который перешел курсор
                    if (!block.contains(event.relatedTarget)) {
                        block.classList.remove('kanban-block--dragover');
                    }
                });

                // Обработчик события 'drop' должен удалять подсветку
                block.addEventListener('drop', (event) => {
                    event.preventDefault();
                    block.classList.remove('kanban-block--dragover'); // Удаляем подсветку после успешного сброса

                    const idTask = event.dataTransfer.getData("text");
                    const draggedElement = document.getElementById(idTask);
                    const lastStatus = draggedElement.parentElement;
                    if (block === lastStatus) { // Используйте === для строгого сравнения
                        return;
                    }
                    block.appendChild(draggedElement);

                    RecalculateKanbanBlock();

                    const idNewStatus = event.currentTarget.id; // Correctly get the ID of the drop target
                    window.V8Proxy.fetch('changeStatus', idTask, idNewStatus); // Убедитесь, что V8Proxy доступен
                });
            });

            document.querySelectorAll('.card').forEach(card => {
                card.addEventListener('dragstart', (event) => {
                    event.dataTransfer.setData("text", event.target.id);
                });
            });
            // Перетаскивание задач по статусам ---

            // document.querySelectorAll('.add_task').forEach(button => {
            //     button.addEventListener('click', (event) => {
            //         // логика добавления задачи, возможно, с извлечением ID статуса из класса
            //         // const statusClass = Array.from(event.currentTarget.classList).find(cls => cls.startsWith('status'));
            //         // const statusId = statusClass ? statusClass.replace('status', '') : null;
            //         // console.log('Добавить задачу в статус:', statusId);
                   
            //     });
            // });

            // Подсветка блока под перетаскиваемыми задачами
            const blockHeaders = document.querySelectorAll('.block_header');
            const kanbanBlocks = document.querySelectorAll('.kanban-block');
            kanbanBlocks.forEach((kanbanBlock, index) => {
                const correspondingHeader = blockHeaders[index];

                // Добавляем обработчик события 'mouseenter' (наведение курсора)
                kanbanBlock.addEventListener('mouseenter', () => {
                    if (correspondingHeader) { // Проверяем, что заголовок существует
                        correspondingHeader.classList.add('block_header--hovered');
                    }
                });

                // Добавляем обработчик события 'mouseleave' (уход курсора)
                kanbanBlock.addEventListener('mouseleave', () => {
                    if (correspondingHeader) {
                        correspondingHeader.classList.remove('block_header--hovered');
                    }
                });
            });

        });
        
        // Обновление счетчиков задач в блоках
        const kanbanBlocks = document.querySelectorAll('.kanban-block');
        function RecalculateKanbanBlock() {
            let block_headers = document.querySelectorAll('.block_header');
            // Рассчитываем количество задач в каждом блоке
            kanbanBlocks.forEach((kanbanBlock, index) => {
                let tasks = kanbanBlock.querySelectorAll('.card:not(.card__inactive)');
                let block_header = block_headers[index];
                let number = block_header.querySelector('.kanban-block__number');
                number.textContent = tasks.length;
            });
        }

        RecalculateKanbanBlock();

    </script>

</body>

</html>