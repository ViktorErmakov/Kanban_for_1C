//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Функция СкомпилироватьВнешнююОбработку(ТекстМодуляОбъект = "", Знач ТекстМодуляОбычнойФормы = "", Знач ТекстМодуляУправляемойФормы = "") Экспорт
	
	// Для сборки используется утилита v8unpack - https://github.com/e8tools/v8unpack
	
	ИдентификаторМодуляОбъекта = "00ab4620-8498-4b18-a4f8-18b53138fcb5.0";
	ИдентификаторФормы = "a10cd1fd-c4ba-437c-9925-b7354192a1ea.0";
	
	РабочийКаталог = ЮТФайлы.ОбъединитьПути(КаталогВременныхФайлов(), "yaxunit-v8unpack"); // BSLLS:UsingSynchronousCalls-off BSLLS:TempFilesDir-off
	ПодготовитьРабочийКаталог(РабочийКаталог);
	
	КаталогСборки = ЮТФайлы.ОбъединитьПути(РабочийКаталог, "build");
	КаталогФайловОбработки = ЮТФайлы.ОбъединитьПути(КаталогСборки, "unpack");
	
	УдалитьФайлы(КаталогСборки); // BSLLS:UsingSynchronousCalls-off
	СоздатьКаталог(КаталогСборки); // BSLLS:UsingSynchronousCalls-off
	
	РаспаковатьОбработку(РабочийКаталог);
	
	ЮТФайлы.СкопироватьКаталог(ЮТФайлы.ОбъединитьПути(РабочийКаталог, "unpack"), КаталогФайловОбработки);
	
	// Модуль объекта
	ИмяФайлаМодуляОбъекта = ЮТФайлы.ОбъединитьПути(КаталогФайловОбработки, ИдентификаторМодуляОбъекта, "text");
	ЮТФайлы.ЗаписатьТекстВФайла(ИмяФайлаМодуляОбъекта, ТекстМодуляОбъект);
	
	// Модуль формы
	ИмяФайлаФормы = ЮТФайлы.ОбъединитьПути(КаталогФайловОбработки, ИдентификаторФормы);
	ДанныеФормы = ЮТФайлы.ДанныеТекстовогоФайла(ИмяФайлаФормы);
	
	Если ЗначениеЗаполнено(ТекстМодуляУправляемойФормы) Тогда
		ТекстМодуляУправляемойФормы = ТекстМодуляУправляемойФормы(ТекстМодуляУправляемойФормы);
	КонецЕсли;
	
	ДанныеФормы = СтрЗаменить(ДанныеФормы, "MODULE_PLACEHOLDER", ТекстМодуляУправляемойФормы);
	
	ЮТФайлы.ЗаписатьТекстВФайла(ИмяФайлаФормы, ДанныеФормы);
	
	ИмяФайла = СобратьОбработку(РабочийКаталог);
	
	Данные = Новый ДвоичныеДанные(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьРабочийКаталог(РабочийКаталог)
	
	Если ЮТФайлы.Существует(РабочийКаталог) И НайтиФайлы(РабочийКаталог, "*").Количество() Тогда // BSLLS:UsingSynchronousCalls-off
		Возврат;
	КонецЕсли;
	
	СоздатьКаталог(РабочийКаталог); // BSLLS:UsingSynchronousCalls-off
	Данные = ПолучитьОбщийМакет("ЮТV8UnpackWS");
	Архив = Новый ЧтениеZipФайла(Данные.ОткрытьПотокДляЧтения());
	Архив.ИзвлечьВсе(РабочийКаталог);
	Архив.Закрыть();
	
КонецПроцедуры

Процедура РаспаковатьОбработку(РабочийКаталог)
	
	Если ЮТФайлы.Существует(ЮТФайлы.ОбъединитьПути(РабочийКаталог, "unpack")) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЮТОкружение.ЭтоWindows() Тогда
		Команда = "unpack-epf.bat";
	Иначе
		Команда = "/bin/bash unpack-epf.sh"; // BSLLS:UsingHardcodePath-off
	КонецЕсли;
	
	ВыполнитьКомандуСистемы(РабочийКаталог, Команда, "Распаковка шаблона обработки");
	
КонецПроцедуры

Функция СобратьОбработку(РабочийКаталог)
	
	Если ЮТОкружение.ЭтоWindows() Тогда
		Команда = "build-epf.bat";
	Иначе
		Команда = "/bin/bash build-epf.sh"; // BSLLS:UsingHardcodePath-off
	КонецЕсли;
	
	ИмяФайла = ЮТФайлы.ОбъединитьПути(РабочийКаталог, Новый УникальныйИдентификатор()) + ".epf";
	Команда = Команда + " " + ИмяФайла;
	
	ВыполнитьКомандуСистемы(РабочийКаталог, Команда, "Сборка обработки");
	
	Возврат ИмяФайла;
	
КонецФункции

Процедура ВыполнитьКомандуСистемы(РабочийКаталог, Знач Команда, Описание)
	
	КодВозврата = Неопределено;
	ФайлЛога = ПолучитьИмяВременногоФайла("log");
	Команда = СтрШаблон("%1 > %2 2>&1", Команда, ФайлЛога);
	
	Если ЮТОкружение.ЭтоWindows() Тогда
		КодВозврата = ВыполнитьКомандуОСБезПоказаЧерногоОкна(Команда, РабочийКаталог);
	Иначе
		Команда = "timeout 5s " + Команда;
		КодВозврата = Неопределено;
		ЗапуститьПриложение(Команда, РабочийКаталог, Истина, КодВозврата); // BSLLS:UsingSynchronousCalls-off
	КонецЕсли;
	
	Если КодВозврата <> 0 Тогда
		Сообщение = СтрШаблон("%1 завершилась с ошибкой. Команда: `%2`; рабочий каталог: `%3`", Описание, Команда, РабочийКаталог);
		Если ЮТФайлы.Существует(ФайлЛога) Тогда
			Сообщение = СтрШаблон("%1
			|Вывод команды:
			|%2", Сообщение, ЮТФайлы.ДанныеТекстовогоФайла(ФайлЛога));
			УдалитьФайлы(ФайлЛога); // BSLLS:UsingSynchronousCalls-off
		КонецЕсли;
		
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьКомандуОСБезПоказаЧерногоОкна(ТекстКоманды, РабочийКаталог) Экспорт
	
#Если НЕ ВебКлиент Тогда
	WshShell = Новый COMОбъект("WScript.Shell"); // BSLLS:UsingObjectNotAvailableUnix-off
	WshShell.CurrentDirectory = РабочийКаталог;
	Рез = WshShell.Run(ТекстКоманды, 0, -1);
	
	Возврат Рез;
#КонецЕсли

КонецФункции

Функция ТекстМодуляУправляемойФормы(ОсновнойТекст)
	
	ОсновнойТекст = СтрЗаменить(ОсновнойТекст, """", """""");
	
	МассивСтрок = СтрРазделить(ОсновнойТекст, Символы.ПС);
	Директива = "&НаКлиенте ";
	
	Для Каждого Строка Из МассивСтрок Цикл
		Если СтрНачинаетсяС(СокрЛ(Строка), "Процедура ") Тогда
			Строка = Директива + Строка;
		ИначеЕсли СтрНачинаетсяС(СокрЛ(Строка), "Функция ") Тогда
			Строка = Директива + Строка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

#КонецОбласти
